"""
Adaptation des param√®tres de trafic pour le contexte Victoria Island Lagos
"""

import yaml
import sys
import os

def create_realistic_traffic_params():
    """Cr√©er des param√®tres de trafic r√©alistes pour Victoria Island"""
    
    print("üöó PARAM√àTRES DE TRAFIC VICTORIA ISLAND LAGOS")
    print("=" * 55)
    
    # Param√®tres contextuels pour Lagos
    traffic_params = {
        'traffic': {
            'context': 'Victoria Island Lagos',
            'description': 'Param√®tres adapt√©s au trafic urbain dense de Lagos',
            
            # Composition du trafic (sp√©cifique √† Lagos)
            'vehicle_mix': {
                'motorcycles_percentage': 35,  # Forte pr√©sence de motos √† Lagos
                'cars_percentage': 45,
                'buses_percentage': 15,
                'trucks_percentage': 5
            },
            
            # Densit√©s maximales (v√©h/km) - trafic dense Lagos
            'max_densities': {
                'motorcycles': 250,  # Motos tr√®s denses
                'cars': 120,
                'total': 370
            },
            
            # Vitesses libres (km/h) - ajust√©es pour Lagos
            'free_speeds': {
                'motorcycles': 32,  # Motos agiles dans le trafic
                'cars': 28,         # Voitures plus lentes en ville
                'average': 30
            },
            
            # Comportements sp√©cifiques Lagos/Afrique de l'Ouest
            'behaviors': {
                'gap_filling_rate': 0.8,      # Comblement des espaces √©lev√©
                'interweaving_rate': 0.7,     # Entrelacement fr√©quent
                'creeping_rate': 0.6,         # Avancement lent en file
                'patience_factor': 0.4,       # Patience limit√©e
                'signal_compliance': 0.7      # Respect mod√©r√© des signaux
            },
            
            # Param√®tres temporels (secondes)
            'timing': {
                'reaction_time': 1.2,         # Temps de r√©action moyen
                'startup_lost_time': 3.5,     # Temps perdu au d√©marrage
                'clearance_lost_time': 2.0,   # Temps perdu en fin de phase
                'yellow_time': 3.0,
                'all_red_time': 2.0
            }
        }
    }
    
    # Sauvegarder les param√®tres de trafic
    with open('configs/traffic_lagos.yaml', 'w') as f:
        yaml.dump(traffic_params, f, default_flow_style=False, indent=2)
    
    print("‚úÖ Param√®tres de trafic Lagos cr√©√©s")
    print("   üìÅ Fichier: configs/traffic_lagos.yaml")
    
    return traffic_params

def adapt_env_config_for_lagos():
    """Adapter la configuration d'environnement pour Lagos"""
    
    print("\nüåç ADAPTATION ENVIRONNEMENT POUR LAGOS")
    print("=" * 45)
    
    # Configuration environnement adapt√©e
    env_config = {
        'environment': {
            'context': 'Victoria Island Lagos',
            'dt_decision': 10.0,           # D√©cisions RL toutes les 10s
            'episode_length': 3600,        # Episodes de 1h
            'max_steps': 360,              # 360 d√©cisions par √©pisode
            
            # Normalisation adapt√©e au contexte Lagos
            'normalization': {
                'rho_max_motorcycles': 250,  # Densit√© max motos
                'rho_max_cars': 120,         # Densit√© max voitures
                'v_free_motorcycles': 32,    # Vitesse libre motos
                'v_free_cars': 28,           # Vitesse libre voitures
                'queue_max': 50,             # File max attendue
                'phase_time_max': 120        # Dur√©e phase max
            },
            
            # Fonction de r√©compense adapt√©e
            'reward': {
                'w_wait_time': 1.2,          # Poids temps d'attente (important √† Lagos)
                'w_queue_length': 0.6,       # Poids longueur files
                'w_stops': 0.4,              # Poids nombre d'arr√™ts
                'w_switch_penalty': 0.08,    # P√©nalit√© changement (r√©duite)
                'w_throughput': 1.0,         # Poids d√©bit (crucial)
                'reward_clip': [-5.0, 5.0],
                'stop_speed_threshold': 5.0  # Seuil vitesse arr√™t (km/h)
            },
            
            # Observations adapt√©es
            'observation': {
                'ewma_alpha': 0.3,           # Lissage exponentiel
                'include_phase_timing': True,
                'include_queues': True,
                'include_speeds': True,
                'include_densities': True
            }
        }
    }
    
    # Sauvegarder
    with open('configs/env_lagos.yaml', 'w') as f:
        yaml.dump(env_config, f, default_flow_style=False, indent=2)
    
    print("‚úÖ Configuration environnement Lagos cr√©√©e")
    print("   üìÅ Fichier: configs/env_lagos.yaml")
    
    return env_config

def adapt_signals_for_lagos():
    """Adapter la configuration des signaux pour Lagos"""
    
    print("\nüö¶ ADAPTATION SIGNAUX POUR LAGOS")
    print("=" * 40)
    
    signals_config = {
        'signals': {
            'context': 'Victoria Island Lagos',
            'intersection_type': 'urban_arterial',
            
            # Phases adapt√©es aux intersections Lagos
            'phases': [
                {
                    'id': 0,
                    'name': 'akin_adesola_ns',
                    'description': 'Akin Adesola Nord-Sud vert',
                    'movements': ['north_through', 'south_through', 'north_left', 'south_left']
                },
                {
                    'id': 1,
                    'name': 'adeola_odeku_ew',  
                    'description': 'Adeola Odeku Est-Ouest vert',
                    'movements': ['east_through', 'west_through', 'east_left', 'west_left']
                }
            ],
            
            # Contraintes temporelles adapt√©es Lagos
            'timing_constraints': {
                'min_green': 15.0,           # Vert minimum plus long (trafic dense)
                'max_green': 90.0,           # Vert maximum r√©duit (fluidit√©)
                'yellow_time': 4.0,          # Jaune plus long (s√©curit√©)
                'all_red_time': 3.0,         # Rouge g√©n√©ral plus long
                'cycle_time_min': 60.0,      # Cycle minimum
                'cycle_time_max': 120.0      # Cycle maximum
            },
            
            # Param√®tres de s√©curit√©
            'safety': {
                'pedestrian_clearance': 8.0, # D√©gagement pi√©tons
                'vehicle_clearance': 4.0,    # D√©gagement v√©hicules
                'startup_lost_time': 3.5,    # Temps perdu d√©marrage
                'clearance_lost_time': 2.5   # Temps perdu d√©gagement
            }
        }
    }
    
    # Sauvegarder
    with open('configs/signals_lagos.yaml', 'w') as f:
        yaml.dump(signals_config, f, default_flow_style=False, indent=2)
    
    print("‚úÖ Configuration signaux Lagos cr√©√©e")  
    print("   üìÅ Fichier: configs/signals_lagos.yaml")
    
    return signals_config

def create_lagos_config_set():
    """Cr√©er un ensemble complet de configurations pour Lagos"""
    
    print("\nüì¶ CR√âATION ENSEMBLE CONFIGURATIONS LAGOS")
    print("=" * 50)
    
    # Cr√©er toutes les configurations
    traffic_params = create_realistic_traffic_params()
    env_config = adapt_env_config_for_lagos()
    signals_config = adapt_signals_for_lagos()
    
    # Configuration ma√Ætre pour utiliser les configs Lagos
    master_config = {
        'experiment': {
            'name': 'Lagos_Victoria_Island',
            'description': 'Contr√¥le de signaux RL pour Victoria Island Lagos',
            'location': 'Lagos, Nigeria',
            'configs': {
                'network': 'network_real.yaml',
                'traffic': 'traffic_lagos.yaml', 
                'environment': 'env_lagos.yaml',
                'signals': 'signals_lagos.yaml',
                'endpoint': 'endpoint.yaml'  # Garder endpoint standard
            },
            'parameters': {
                'algorithm': 'DQN',
                'timesteps': 50000,
                'evaluation_freq': 5000,
                'save_freq': 10000
            }
        }
    }
    
    with open('configs/lagos_master.yaml', 'w') as f:
        yaml.dump(master_config, f, default_flow_style=False, indent=2)
    
    print("\nüéØ ENSEMBLE COMPLET CR√â√â !")
    print("   üìÅ Fichiers cr√©√©s :")
    print("      ‚Ä¢ configs/traffic_lagos.yaml")
    print("      ‚Ä¢ configs/env_lagos.yaml")
    print("      ‚Ä¢ configs/signals_lagos.yaml")
    print("      ‚Ä¢ configs/lagos_master.yaml")
    
    print("\nüöÄ Utilisation :")
    print("   ‚Ä¢ Test: python demo.py (avec configs Lagos)")
    print("   ‚Ä¢ Train: python train.py --config lagos --use-mock")
    
    return master_config

def main():
    """Cr√©ation principale des configurations Lagos"""
    create_lagos_config_set()

if __name__ == "__main__":
    main()
